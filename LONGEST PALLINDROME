#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int longest_palindromic_substring_length(int n, char* s) {
   
    int t_len = 2 * n + 1;
    char* t = (char*)malloc((t_len + 1) * sizeof(char));
    int* p = (int*)malloc(t_len * sizeof(int));
    
    t[t_len] = '\0';
    for (int i = 0; i < t_len; i++) {
        if (i % 2 == 0) {
            t[i] = '#';
        } else {
            t[i] = s[i / 2];
        }
    }

    int center = 0, right = 0, max_len = 0;
    for (int i = 0; i < t_len; i++) {
        int mirror = 2 * center - i;
        if (i < right) {
            p[i] = (p[mirror] < (right - i)) ? p[mirror] : (right - i);
        } else {
            p[i] = 0;
        }

        
        while (i + p[i] + 1 < t_len && i - p[i] - 1 >= 0 && t[i + p[i] + 1] == t[i - p[i] - 1]) {
            p[i]++;
        }

        
        if (i + p[i] > right) {
            center = i;
            right = i + p[i];
        }

        
        if (p[i] > max_len) {
            max_len = p[i];
        }
    }

    
    free(t);
    free(p);

    return max_len;
}

int main() {
    int n;
    scanf("%d", &n);

    char* s = (char*)malloc((n + 1) * sizeof(char));
    scanf("%s", s);

    int result = longest_palindromic_substring_length(n, s);
    printf("%d\n", result);

    free(s);
    return 0;
}
